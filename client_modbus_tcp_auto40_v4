#!/usr/bin/env python
import sys

from pymodbus.client.sync import ModbusTcpClient as ModbusClient
from pymodbus.constants import Endian
from pymodbus.payload import BinaryPayloadDecoder

import configparser

# Librerias para transmitir a emonCMS
import urllib.request
import time

import sched, threading

import logging
from logging.handlers import RotatingFileHandler

# Para obtener mas detalle: level=logging.DEBUG
# Para comprobar el funcionamiento: level=logging.INFO
logging.basicConfig(
        level=logging.INFO,
        handlers=[RotatingFileHandler('./logs/log_modbus.log', maxBytes=10000000, backupCount=10)],
        format='%(asctime)s %(levelname)s %(message)s',
        datefmt='%m/%d/%Y %I:%M:%S %p')


#################################
# Parseo de variables del .ini
# Este fichero debe estar en el mimo directorio
#################################

parser = configparser.ConfigParser()
parser.read('config.ini')

# devuelve una list con todas las secciones
sections = parser.sections()

# Parseo de las variables de emonCMS
tx_site = parser.get('emoncms','site')
tx_cms_ip = parser.get('emoncms','cms_ip')
tx_path = parser.get('emoncms','path')
tx_key = parser.get('emoncms','key')


# Lista para incluir los servidores
servers_list=[]

# Lista para incluir los registros
registers_list=[]

# Lista de registros ordenados por servidor
# [[aa,ab,ac],[ba,bb,bc],[ca,cb,cc],[da,db,dc]]
server_register_list=[]

# diccionario con los resultados
# {"F_Active_State_Code":"0.00", "F_Site_Power":"","F_Site_Energy_Year":"33.33","F_W":"33.33","F_DCW":"33.33","M_W":"33.33",}
register_values_list={}


# Listas separadas de servidores y registros
for section in sections:
    if parser.has_option(section,'url'):
        servers_list.append(section)
        
    if parser.has_option(section,'server'):
        registers_list.append(section)
        register_values_list[section]="0.00"


# lista de serrvidores y registros de cada servidor
# Para el uso de ini para la lectura de registros
for server in servers_list:
    registers_temp_list=[]
    for register in registers_list:
        if server == parser.get(register,'server'):
            registers_temp_list.append(register)
    server_register_list.append(registers_temp_list)
logging.info("*" * 4 + ' Servidores')
logging.info(servers_list)
logging.info("*" * 4 + ' Registros agrupados por servidor')
logging.info(server_register_list)
logging.info("*" * 4 + ' Diccionario de resultados')
logging.info(register_values_list)


###########################################
# definicion BATERIA
###########################################

class Battery(): #Creamos la clase 
    def __init__(self, batCapacity, batPerformance, minEnergy, maxWLoad): #Batería

        self.batCapacity = batCapacity          # Capacidad en vatios hora
        self.batPerformance = batPerformance
        self.minEnergy = minEnergy              # Porcentaje de la bateria
        self.maxWLoad = maxWLoad
        
        self.savedEnergy = 0
        # self.mode = "net"
        self.mode = "bat"
        
        #Variables de red
        self.WhExpNetAdd = 0
        self.WhImpNetAdd = 0
        
        self.enter_values_dict={}
        
        
    def loadWh(self, power, seconds):
        self.savedEnergy += power*seconds/3600
    
    def unloadWh(self, power, seconds):
        self.savedEnergy -= power*seconds/3600
        
    def availCapacity(self):
        value = self.savedEnergy - self.minEnergy * self.batCapacity/100
        if value < 0: 
            value = 0
        return value
    
    
    
    def dataProcess(self, _enter_values_dict):
        
        self.mode = "bat"
        
        self.enter_values_dict = _enter_values_dict
        
        F_Site_Energy_Year_f = float(self.enter_values_dict["F_Site_Energy_Year"])     # Teniendo en cuenta a Huawei
        F_W_f = float(self.enter_values_dict["F_W"])                                   # Teniendo en cuenta a Huawei
        M_W_f = float(self.enter_values_dict["M_W"])
        M_TotWhExp_f = float(self.enter_values_dict["M_TotWhExp"])
        M_TotWhImp_f = float(self.enter_values_dict["M_TotWhImp"])
        
        if self.mode == "bat":
            if M_W_f > 0:                               # consumiendo de red
                if(self.availCapacity() > M_W_f/60):    # consumiendo de bateria
                    self.unloadWh(M_W_f, 60)
                    self.WhImpNetAdd += M_W_f/60        # Energía, Restar de la importada
                    F_W_f=F_W_f + M_W_f
                    M_W_f = 0.00
                else:
                    self.mode = "net"
                
            if M_W_f < 0:                               # exportando a red
                if self.savedEnergy < self.batCapacity: # cargando la bateria
                    self.loadWh(abs(M_W_f),60) 
                    self.WhExpNetAdd += abs(M_W_f)/60   # Energía, Restar de la exportada
                    F_W_f=F_W_f + M_W_f
                    M_W_f = 0.00
                else:
                    self.mode = "net"
                    
                    
        self.enter_values_dict["F_Site_Energy_Year"]= str(F_Site_Energy_Year_f) 

        self.enter_values_dict["F_Site_Power"]= str(F_W_f) 

        self.enter_values_dict["M_W"]= str(M_W_f)
        self.enter_values_dict["F_W"]= str(F_W_f) 
        
        # self.enter_values_dict["M_TotWhExp"]= str(M_TotWhExp_f - self.WhExpNetAdd)
        self.enter_values_dict["M_TotWhExp"]= "{:.2f}".format(M_TotWhExp_f - self.WhExpNetAdd)
        
        # self.enter_values_dict["M_TotWhImp"]= str(M_TotWhImp_f - self.WhImpNetAdd)  
        self.enter_values_dict["M_TotWhImp"]= "{:.2f}".format(M_TotWhImp_f - self.WhImpNetAdd)
        
        # self.enter_values_dict["B_Energy"] = str(self.savedEnergy) 
        self.enter_values_dict["B_Energy"] = "{:.2f}".format(self.savedEnergy)
        
        
        self.enter_values_dict["B_mode"] = str(self.mode)
        
        return self.enter_values_dict       

lgChem = Battery(6600, 98, 10, 1000 ) #Instancia




###########################################
# definicion de funciones
###########################################

def emoncms_tx(_tx_server,_url_values):

  
    url = "https://center.autoconsumo.cloud/api/input/instalation/status/{0}".format(tx_key)
    string_name_value ="?{0}".format(_url_values)

    full_url = url + string_name_value
    logging.info("emoncms_tx- full_url")
    logging.info(full_url)

    #Transmision de datos al SERVIDOR
    response = urllib.request.urlopen(full_url)
    web_page=response.read()
    logging.info(web_page)
    web_page_str = str(web_page)

# FUNCION: preguntar holding valor por MODBUS
def read_holding_value(tx_server_, tx_register_):

    logging.debug('---- ' + tx_register_)

    tx_start = int(parser.get(tx_register_,'start'))
    tx_count = int(parser.get(tx_register_,'registers'))
    tx_unit = int(parser.get(tx_server_,'unit'))
    st_byteorder = parser.get(tx_server_,'byteorder')
    exec("global tx_byteorder\ntx_byteorder = %s" % (st_byteorder))
    st_wordorder = parser.get(tx_server_,'wordorder')
    exec("global tx_wordorder\ntx_wordorder = %s" % (st_wordorder))

    #register_red = True
    value = "Error"

    try:
        res1 = cli.read_holding_registers(tx_start, count=tx_count, unit=tx_unit)
        logging.debug('tx_byteorder: '+ tx_byteorder)
        logging.debug('tx_wordorder: '+ tx_wordorder)
        decoder = BinaryPayloadDecoder.fromRegisters(res1.registers,
                                                     byteorder= tx_byteorder,
                                                     wordorder= tx_wordorder)

        st_tipe = "decoder.decode_" + parser.get(tx_register_,'tipe') + "()"
        # logging.info("global decoded\ndecoded = %s" % (st_tipe))
        exec("global decoded\ndecoded = %s" % (st_tipe))

        value = "%.2f" % decoded

        logging.debug('st_tipe: '+ st_tipe)
        logging.debug("registros:" + str(res1.registers))

    except:
        # print("Error:", sys.exc_info()[0])
        logging.warning("Error al leer el registro: " + tx_register_)
        #register_red = False

    # if register_red == True:
        
        # emoncms_tx(tx_server_,tx_register_,value)
    return(value)
        
# FUNCION: Recorremos los registros del fichero .ini
def matrix_reading(tm):
    threading.Timer(tm, matrix_reading,args=[tm]).start()

    logging.debug("*" * 4 + ' Recorremos servidores y sus registros')
    
    n_connexions = True
    
    for s in range(len(servers_list)):
        #register_values_list=[]
    
        tx_server = servers_list[s]
        tx_url = parser.get(tx_server,'url')
        tx_port = parser.get(tx_server,'port')

        logging.debug('------ ' + tx_server)
        global cli
        cli = ModbusClient(tx_url, port=tx_port)
        connexion = True
        try:
            # sin el assert el fallo en la conexión no se toma como error
            assert cli.connect()
        except:
            connexion = False
            n_connexions = False
            logging.warning("Error en la conexión al Servidor")

        if connexion == True:
            for r in range(len(server_register_list[s])):
                tx_register = server_register_list[s][r]
                rx_value = read_holding_value(tx_server, tx_register)
                # register_values_list.append(rx_value)
                # logging.info(register_values_list)
                if rx_value != "Error":     
                    register_values_list[tx_register] = rx_value
                else:
                     logging.info("rx_value ha dado error para la variable:")
                     logging.info(tx_register)
                     n_connexions = False
                
            
    if n_connexions == True:
        # Llamada a la clase Battery
        logging.info("**** register_values_list")
        logging.info(register_values_list)
        values_processed_dict = lgChem.dataProcess(register_values_list)
        
        url_values = ""
        n = 0
        for r in values_processed_dict.keys():
            tx_register = r
            tx_value = values_processed_dict[r]

            url_values += tx_register + "=" + tx_value
            if n < len(values_processed_dict)-1:
                url_values += "&"
            n=n+1
        logging.info("**** values_processed_dict")
        logging.info(values_processed_dict)
        
        logging.info(url_values)
        emoncms_tx(tx_server,url_values)

                


###########################################
# Ejecución temporal de las funciones
###########################################

matrix_reading(59.0)

